{"version":3,"sources":["components/CodeInput.tsx","components/ProgramOutput.tsx","brainfuck/Interpreter.ts","components/CodeDisplay.tsx","components/RunDisplay.tsx","components/Runner.tsx","App.tsx","index.tsx"],"names":["CodeOption","displayName","name","options","onChange","type","checked","id","htmlFor","CodeInput","input","code","setInput","useState","fontSize","setFontSize","setPreset","presets","changeHandler","event","target","className","v","value","e","style","placeholder","onClick","ProgramOutput","text","readOnly","Interpreter","outHandler","inHandler","_array","_pointer","_code","_programCounter","_inHandler","_outHandler","_options","buf","ArrayBuffer","this","Uint8Array","minify","execute","char","Error","loopForwards","loopBackwards","enableBreakpoints","undefined","length","level","lastInstruction","CHARS","push","split","filter","c","includes","join","CodeDisplay","index","firstCodePart","substr","secondCodePart","backgroundColor","MemoryCell","interpreter","ascii","isEditing","setIsEditing","array","inputField","useRef","saveAndQuit","content","String","fromCharCode","current","select","onKeyDown","console","log","key","ref","onBlur","autoFocus","RunDisplay","offset","useContext","OptionContext","pointer","MAX_TABLE_COLUMNS","arrayWithIndex","Array","fill","map","_","i","n","asciiView","SpeedControl","speed","setSpeed","s","ManualControlButtons","rerender","run","Runner","setRunning","running","setInterpreter","info","setInfo","startTime","setStartTime","setRerenderNumber","inputArea","inputHandler","charCodeAt","startHandler","useCallback","directStart","Date","now","nextHandler","next","message","reachedEnd","useEffect","interval","setInterval","clearInterval","programCounter","React","createContext","App","out","setOut","oldOut","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a86d9d8.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\nimport presets from \"../presets.json\";\r\n\r\nexport interface CodeOptions {\r\n    minify?: boolean,\r\n    directStart?: boolean,\r\n    enableBreakpoints?: boolean\r\n    asciiView?: boolean\r\n}\r\n\r\ninterface CodeInputProps {\r\n    setInput: ((code: string, options: CodeOptions) => void),\r\n    input: [string, CodeOptions]\r\n}\r\n\r\nconst CodeInput = ({input: [code, options], setInput}: CodeInputProps) => {\r\n    const [fontSize, setFontSize] = useState(40);\r\n\r\n    const setPreset = (name: keyof typeof presets) => () => {\r\n        setInput(presets[name], options);\r\n    }\r\n\r\n    const changeHandler = (name: keyof CodeOptions) => (event: ChangeEvent<HTMLInputElement>) => {\r\n        setInput(code, {...options, [name]: event.target.checked})\r\n    }\r\n\r\n    return (\r\n        <div className=\"bf-input\">\r\n            <div>\r\n                <div>\r\n                    <label htmlFor=\"bf-input-fontsize-range\">Font Size</label>\r\n                    <input type=\"range\" id=\"bf-input-fontsize-range\" onChange={v => setFontSize(+v.target.value)}/>\r\n                </div>\r\n\r\n                <CodeOption displayName=\"Minify Code\" name=\"minify\" options={options} onChange={changeHandler}/>\r\n                <CodeOption displayName=\"Start Directly\" name=\"directStart\" options={options}\r\n                            onChange={changeHandler}/>\r\n                <CodeOption displayName=\"Breakpoints (•)\" name=\"enableBreakpoints\" options={options}\r\n                            onChange={changeHandler}/>\r\n                <CodeOption displayName=\"Show ASCII in memory\" name=\"asciiView\" options={options}\r\n                            onChange={changeHandler}/>\r\n\r\n            </div>\r\n            <textarea value={code} onChange={e => setInput(e.target.value, options)} style={{fontSize}}\r\n                      className=\"code-input\"\r\n                      placeholder=\"Input your code here...\"/>\r\n            <div>\r\n                <div>Presets</div>\r\n                <div>\r\n                    <button onClick={setPreset(\"helloworld\")}>Hello World</button>\r\n                    <button onClick={setPreset(\"hanoi\")}>Towers of Hanoi</button>\r\n                    <button onClick={setPreset(\"quine\")}>Quine</button>\r\n                    <button onClick={setPreset(\"gameoflife\")}>Game Of Life</button>\r\n                    <button onClick={setPreset(\"benchmark\")}>Benchmark</button>\r\n                    <button onClick={setPreset(\"fizzbuzz\")}>Fizzbuzz</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface CodeOptionProps {\r\n    displayName: string,\r\n    name: keyof CodeOptions,\r\n    options: CodeOptions,\r\n    onChange: (name: keyof CodeOptions) => (event: ChangeEvent<HTMLInputElement>) => void,\r\n}\r\n\r\nconst CodeOption = ({displayName, name, options, onChange}: CodeOptionProps) => {\r\n    return (\r\n        <span>\r\n        <input type=\"checkbox\" checked={options[name]} id={`input-options-${name}`}\r\n               onChange={onChange(name)}/>\r\n        <label htmlFor={`input-options-${name}`}>{displayName}</label>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default CodeInput;","import React from 'react';\r\n\r\ninterface ProgramOutputProps {\r\n    text: string\r\n}\r\n\r\nconst ProgramOutput = ({text}: ProgramOutputProps) => {\r\n    return (\r\n        <div className=\"bf-output\">\r\n            <textarea readOnly className=\"output-area\" value={text}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgramOutput;","import {CodeOptions} from \"../components/CodeInput\";\r\n\r\ntype InHandler = (() => number);\r\ntype OutHandler = ((char: number) => void);\r\n\r\nexport default class Interpreter {\r\n    private readonly _array: Uint8Array;\r\n    private _pointer: number;\r\n    private readonly _code: string;\r\n    private _programCounter: number;\r\n\r\n    private readonly _inHandler: InHandler;\r\n    private readonly _outHandler: OutHandler;\r\n\r\n    private readonly _options: CodeOptions;\r\n\r\n    constructor(input: [string, CodeOptions], outHandler: OutHandler, inHandler: InHandler) {\r\n        const buf = new ArrayBuffer(32000);\r\n        this._array = new Uint8Array(buf);\r\n        this._pointer = 0;\r\n\r\n        this._options = input[1];\r\n        if (input[1].minify) {\r\n            this._code = this.minify(input[0])\r\n        } else {\r\n            this._code = input[0];\r\n        }\r\n\r\n        this._programCounter = 0;\r\n        this._inHandler = inHandler;\r\n        this._outHandler = outHandler;\r\n    }\r\n\r\n    public next() {\r\n        this.execute(this._code[this._programCounter++]);\r\n    }\r\n\r\n    public execute(char: string) {\r\n        switch (char) {\r\n            case '+':\r\n                this._array[this._pointer]++;\r\n                break;\r\n            case '-':\r\n                this._array[this._pointer]--;\r\n                break;\r\n            case '>':\r\n                this._pointer++;\r\n                break;\r\n            case '<':\r\n                if (this._pointer === 0) {\r\n                    throw new Error(\"Cannot wrap left\");\r\n                }\r\n                this._pointer--;\r\n                break;\r\n            case '.':\r\n                this._outHandler(this.value);\r\n                break;\r\n            case ',':\r\n                this.input();\r\n                break;\r\n            case '[':\r\n                this.loopForwards();\r\n                break;\r\n            case ']':\r\n                this.loopBackwards();\r\n                break;\r\n            case '•':\r\n                if (this._options.enableBreakpoints) {\r\n                    throw new Error(\"Breakpoint reached\");\r\n                }\r\n                break;\r\n            case undefined:\r\n                this._programCounter = this._code.length;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private loopForwards() {\r\n        if (this.value === 0) {\r\n            let level = 0;\r\n            while (this.lastInstruction !== ']' || level > -1) {\r\n                this._programCounter++;\r\n                if (this._programCounter > this._code.length) {\r\n                    throw new Error(\"Reached end of code while searching ']'\");\r\n                }\r\n                if (this.lastInstruction === '[') level++;\r\n                else if (this.lastInstruction === ']') level--;\r\n            }\r\n        }\r\n    }\r\n\r\n    private loopBackwards() {\r\n        if (this.value !== 0) {\r\n            let level = 0;\r\n            while (this.lastInstruction !== '[' || level > -1) {\r\n                this._programCounter--;\r\n                if (this._programCounter < 0) {\r\n                    throw new Error(\"Reached start of code while searching '['\");\r\n                }\r\n                if (this.lastInstruction === '[') level--;\r\n                else if (this.lastInstruction === ']') level++;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private input() {\r\n        try {\r\n            this._array[this._pointer] = this._inHandler();\r\n        } catch {\r\n            this._programCounter--;\r\n        }\r\n    }\r\n\r\n    public prev() {\r\n        // - will add some day\r\n    }\r\n\r\n    get reachedEnd(): boolean {\r\n        return this._programCounter === this._code.length;\r\n    }\r\n\r\n    get lastInstruction(): string {\r\n        return this._code[this._programCounter - 1];\r\n    }\r\n\r\n    get value(): number {\r\n        return this._array[this._pointer];\r\n    }\r\n\r\n    get array(): Uint8Array {\r\n        return this._array;\r\n    }\r\n\r\n    get pointer(): number {\r\n        return this._pointer;\r\n    }\r\n\r\n    get code(): string {\r\n        return this._code;\r\n    }\r\n\r\n    get programCounter(): number {\r\n        return this._programCounter;\r\n    }\r\n\r\n    private minify(code: string): string {\r\n        const CHARS = ['+', '-', '<', '>', '.', ',', '[', ']'];\r\n        if (this._options.enableBreakpoints) {\r\n            CHARS.push('•');\r\n        }\r\n\r\n        return code.split(\"\")\r\n            .filter(c => CHARS.includes(c))\r\n            .join(\"\");\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\ninterface CodeDisplayProps {\r\n    code: string,\r\n    index: number,\r\n}\r\n\r\nconst CodeDisplay = ({code, index}: CodeDisplayProps) => {\r\n\r\n    const firstCodePart = code.substr(0, index);\r\n    const secondCodePart = code.substr(index + 1, code.length - index + 1);\r\n\r\n    return (\r\n        <div className=\"code-display-wrapper\">\r\n            <span>{firstCodePart}</span>\r\n            <span style={{backgroundColor: \"red\"}}>{code[index] || \" \"}</span>\r\n            <span>{secondCodePart}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CodeDisplay;","import React, {useContext, useRef, useState} from 'react';\r\nimport Interpreter from \"../brainfuck/Interpreter\";\r\nimport {OptionContext} from \"../App\";\r\n\r\nconst MAX_TABLE_COLUMNS = 20;\r\n\r\ninterface RunDisplayProps {\r\n    interpreter: Interpreter,\r\n}\r\n\r\nconst RunDisplay = ({interpreter}: RunDisplayProps) => {\r\n    const options = useContext(OptionContext);\r\n\r\n    const index = interpreter.pointer;\r\n\r\n    let offset: number;\r\n\r\n    if (index < MAX_TABLE_COLUMNS / 2) {\r\n        offset = 0;\r\n    } else {\r\n        offset = index - MAX_TABLE_COLUMNS / 2;\r\n    }\r\n\r\n    const arrayWithIndex = Array(MAX_TABLE_COLUMNS).fill(0)\r\n        .map((_, i) => i + offset);\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"memory-display-table\">\r\n                <thead>\r\n                <tr>\r\n                    {\r\n                        arrayWithIndex.map((n => <th key={n}>{n}</th>))\r\n                    }\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    {\r\n                        arrayWithIndex.map((n) => <MemoryCell key={n} index={n} interpreter={interpreter}/>)\r\n                    }\r\n                </tr>\r\n                {\r\n                    options.asciiView &&\r\n                    <tr>\r\n                        {\r\n                            arrayWithIndex.map((n) => <MemoryCell key={n} index={n} interpreter={interpreter} ascii/>)\r\n                        }\r\n                    </tr>\r\n                }\r\n                <tr>\r\n                    {\r\n                        arrayWithIndex.map((n) => <td className=\"pointer\"\r\n                                                      key={n}>{interpreter.pointer === n && \"^\"}</td>)\r\n                    }\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface MemoryCellProps {\r\n    index: number,\r\n    interpreter: Interpreter,\r\n    ascii?: boolean,\r\n}\r\n\r\nconst MemoryCell = ({index, interpreter, ascii}: MemoryCellProps) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [input, setInput] = useState(interpreter.array[index] + \"\");\r\n\r\n    const inputField = useRef<HTMLInputElement>(null);\r\n\r\n    const saveAndQuit = () => {\r\n        interpreter.array[index] = +(input);\r\n        setIsEditing(false);\r\n    }\r\n\r\n    const click = () => {\r\n        setIsEditing(true);\r\n        inputField.current?.select();\r\n    }\r\n\r\n    const keyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        console.log(\"key\", e.key);\r\n        if (e.key === \"Escape\") {\r\n            setIsEditing(false);\r\n        } else if (e.key === \"Enter\") {\r\n            saveAndQuit();\r\n        }\r\n    }\r\n\r\n    const content = ascii ?\r\n        String.fromCharCode(interpreter.array[index])\r\n        :\r\n        interpreter.array[index];\r\n\r\n    return (\r\n        <td onClick={click} className=\"cell\">\r\n            {\r\n                isEditing && !ascii ?\r\n                    <input onKeyDown={keyDown}\r\n                           className=\"array-set-value-field\"\r\n                           ref={inputField}\r\n                           onChange={e => setInput(e.target.value)}\r\n                           value={input}\r\n                           onBlur={saveAndQuit}\r\n                           autoFocus\r\n                    />\r\n                    :\r\n                    content\r\n            }\r\n        </td>\r\n    );\r\n}\r\n\r\nexport default RunDisplay;","import React, {useCallback, useContext, useEffect, useRef, useState} from 'react';\r\nimport Interpreter from \"../brainfuck/Interpreter\";\r\nimport CodeDisplay from \"./CodeDisplay\";\r\nimport RunDisplay from \"./RunDisplay\";\r\nimport {OptionContext} from \"../App\";\r\n\r\ninterface RunInfoProps {\r\n    code: string,\r\n    setRunning: (running: boolean) => void,\r\n    running: boolean\r\n    outHandler: (char: number) => void,\r\n}\r\n\r\nconst Runner = ({setRunning, running, outHandler, code}: RunInfoProps) => {\r\n    const [speed, setSpeed] = useState(0);\r\n    const [interpreter, setInterpreter] = useState<Interpreter | null>(null);\r\n    const [info, setInfo] = useState<string | null>(null);\r\n    const [startTime, setStartTime] = useState(0);\r\n\r\n    const [, setRerenderNumber] = useState(0);\r\n    const options = useContext(OptionContext);\r\n\r\n\r\n    const rerender = () => setRerenderNumber(n => n + 1);\r\n\r\n    const inputArea = useRef<HTMLTextAreaElement>(null);\r\n\r\n\r\n    const inputHandler = () => {\r\n        if (!inputArea.current) {\r\n            throw new Error(\"Could not read input\")\r\n        }\r\n        const value = inputArea.current.value;\r\n        if (value.length < 1) {\r\n            throw new Error(\"No input found\");\r\n        }\r\n        const char = value.charCodeAt(0);\r\n        inputArea.current.value = value.substr(1);\r\n        return char;\r\n    }\r\n\r\n    const startHandler = useCallback(() => {\r\n        if (options.directStart) {\r\n            setSpeed(100);\r\n        } else {\r\n            setSpeed(0);\r\n        }\r\n\r\n        setStartTime(Date.now);\r\n        setInterpreter(new Interpreter([code, options], outHandler, inputHandler));\r\n        setRunning(false);\r\n        setRunning(true);\r\n    }, [options, code, outHandler, setRunning]);\r\n\r\n    const stopHandler = () => {\r\n        setRunning(false);\r\n        setInfo(null);\r\n    }\r\n\r\n    const nextHandler = useCallback(() => {\r\n        setInfo(null);\r\n        try {\r\n            interpreter?.next();\r\n        } catch (e) {\r\n            setInfo(e.message);\r\n            setSpeed(0);\r\n        }\r\n        if (interpreter?.reachedEnd) {\r\n            setSpeed(0);\r\n            setInfo(`Finished Execution. Took ${(Date.now() - startTime) / 1000}s`)\r\n        }\r\n        rerender();\r\n    }, [interpreter, startTime]);\r\n\r\n    useEffect(() => {\r\n        if (running) {\r\n            if (speed === 0) {\r\n                return;\r\n            }\r\n\r\n            const interval = setInterval(() => {\r\n                nextHandler();\r\n            }, 1000 / (speed * 10));\r\n\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [running, nextHandler, speed]);\r\n\r\n\r\n    return (\r\n        <div className=\"bf-run\">\r\n            {\r\n                running && interpreter && <>\r\n                    <CodeDisplay code={interpreter.code} index={interpreter.programCounter}/>\r\n                    <RunDisplay interpreter={interpreter}/>\r\n                </>\r\n            }\r\n            <div>\r\n                {running && <button onClick={stopHandler}>Back</button>}\r\n                <button onClick={startHandler}>{running ? \"Restart\" : \"Start\"}</button>\r\n                {running && <button onClick={nextHandler}>Next</button>}\r\n            </div>\r\n            {\r\n                running && interpreter &&\r\n                <>\r\n                    <SpeedControl speed={speed} setSpeed={setSpeed}/>\r\n                    <ManualControlButtons interpreter={interpreter} rerender={rerender}/>\r\n                </>\r\n            }\r\n            {info && <div className=\"info\">{info}</div>}\r\n            {\r\n                running && <div>\r\n                    <div>Input:</div>\r\n                    <textarea className=\"program-input-area\" ref={inputArea}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface SpeedControlProps {\r\n    speed: number,\r\n    setSpeed: React.Dispatch<React.SetStateAction<number>>,\r\n}\r\n\r\nconst SpeedControl = ({speed, setSpeed}: SpeedControlProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"run-info-speed-range\">Speed</label>\r\n            <input type=\"range\" id=\"run-info-speed-range\" value={speed}\r\n                   onChange={e => setSpeed(+e.target.value)}/>\r\n            <span> {speed}</span>\r\n            <span>\r\n                <button onClick={() => setSpeed(s => s === 0 ? 0 : s - 1)}\r\n                        className=\"small-speed-button\">-</button>\r\n                <button onClick={() => setSpeed(0)}\r\n                        className=\"small-speed-button\">0</button>\r\n                <button onClick={() => setSpeed(s => s === 100 ? 100 : s + 1)}\r\n                        className=\"small-speed-button\">+</button>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ManualControlButtons = ({interpreter, rerender}: { interpreter: Interpreter, rerender: (() => void) }) => {\r\n\r\n    const run = (char: string) => {\r\n        try {\r\n            interpreter.execute(char);\r\n        } catch {\r\n        }\r\n        rerender();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => run('<')} className=\"small-speed-button\">&lt;</button>\r\n            <button onClick={() => run('>')} className=\"small-speed-button\">&gt;</button>\r\n            <button onClick={() => run('-')} className=\"small-speed-button\">-</button>\r\n            <button onClick={() => run('+')} className=\"small-speed-button\">+</button>\r\n            <button onClick={() => run('.')} className=\"small-speed-button\">.</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Runner;","import './App.scss';\nimport CodeInput, {CodeOptions} from \"./components/CodeInput\";\nimport ProgramOutput from \"./components/ProgramOutput\";\nimport React, {useCallback, useState} from \"react\";\nimport Runner from \"./components/Runner\";\n\nexport const OptionContext = React.createContext<CodeOptions>({});\n\nfunction App() {\n    const [out, setOut] = useState(\"\");\n    const [input, setInput] = useState<[string, CodeOptions]>([\"\", {}]);\n    const [running, setRunning] = useState(false);\n\n    const outHandler = useCallback((char: number) => {\n        setOut(oldOut => oldOut + String.fromCharCode(char))\n    }, []);\n\n    const runHandler = (run: boolean) => {\n        setRunning(run);\n        if (!run) {\n            setOut(\"\");\n        }\n    }\n\n\n    const inputHandler = (code: string, options: CodeOptions) => setInput([code, options]);\n    return (\n        <div className=\"App-header\">\n            <OptionContext.Provider value={input[1]}>\n                {\n                    !running && <CodeInput input={input} setInput={inputHandler}/>\n                }\n                <Runner running={running} setRunning={runHandler} code={input[0]} outHandler={outHandler}/>\n                {\n                    running && <ProgramOutput text={out}/>\n                }\n            </OptionContext.Provider>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}